#include "msp430.h"                     ; #define controlled include file

        NAME    main                    ; module name

        PUBLIC  main                    ; make the main label vissible
                                        ; outside this module
        ORG     0FFFEh
        DC16    init                    ; set reset vector to 'init' label

        RSEG    CSTACK                  ; pre-declaration of segment
        RSEG    CODE                    ; place program in 'CODE' segment

init:   MOV     #SFE(CSTACK), SP        ; set up stack

main:   NOP                             ; main program
        MOV.W   #WDTPW+WDTHOLD,&WDTCTL  ; Stop watchdog timer
	mov.w	#2, R14
	mov.w	#3, R15
        call    #MULT_unsigned
        JMP $                           ; jump to current location '$'
                                        ; (endless loop)

MULT_unsigned:
        tst.w R14 ; b==0 ?
	jnz MULT_unsigned_else ; Se b não é zero, vá para o else
	clr.w R15 ; return 0
	ret
MULT_unsigned_else:
	push.w R15 ; Guarde a na pilha
	dec.w R14 ; b--
	call #MULT_unsigned ; Calcule a*(b-1)
	pop.w R14 ; Recupere a na pilha
	add.w R14, R15 ; return a + a*(b-1)
	ret

        END
